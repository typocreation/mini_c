cmake_minimum_required(VERSION 3.10.0)
set(CMAKE_CXX_STANDARD 17) 
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# set (CMAKE_CXX_COMPILER "/usr/bin/clang")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -lm")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fdebug-prefix-map=${CMAKE_BINARY_DIR}=${CMAKE_SOURCE_DIR}") #fix gdb can't find source path
message(${CMAKE_CXX_FLAGS})
set(CMAKE_BUILD_TYPE "Debug")

project(SYSY-compiler VERSION 0.1.0 LANGUAGES C CXX)
add_definitions(-DSYSY_ENABLE_MIDDLE_END)
# add_definitions(-DTEST)
add_definitions(-DLEVEL)
# add_definitions(-DDEBUG)
add_definitions(-DSYSY_ENABLE_BACKEND)
include(CTest)
enable_testing()

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld")
set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=lld")
set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=lld")
set(CMAKE_EXPORT_COMPILECOMMANDS ON)
set(CMAKE_CXX_FLAGS "-DCMAKE_EXPORT_COMPILE_COMMANDS=1")

include_directories(${CMAKE_SOURCE_DIR}/util)
include_directories(${CMAKE_SOURCE_DIR}/include/backend)
include_directories(${CMAKE_SOURCE_DIR}/include/ir/opt)
include_directories(${CMAKE_SOURCE_DIR}/include/ir/Analysis)
include_directories(${CMAKE_SOURCE_DIR}/include/lib)
include_directories(${CMAKE_SOURCE_DIR}/include/yacc)
# include_directories(${CMAKE_SOURCE_DIR}/Target)

add_executable(SYSY-compiler main.cpp)
add_subdirectory(${PROJECT_SOURCE_DIR}/yacc)
add_subdirectory(${PROJECT_SOURCE_DIR}/ir)
add_subdirectory(${PROJECT_SOURCE_DIR}/lib)
add_subdirectory(${PROJECT_SOURCE_DIR}/backend)
add_subdirectory(${PROJECT_SOURCE_DIR}/test_infrastructure)
# add_subdirectory(${PROJECT_SOURCE_DIR}/Target)

target_link_libraries(SYSY-compiler Yacc Lib Backend opt Analysis) #Target

target_include_directories(SYSY-compiler PRIVATE ${PROJECT_SOURCE_DIR}/yacc)
target_include_directories(SYSY-compiler PRIVATE ${PROJECT_SOURCE_DIR}/lib)
target_include_directories(SYSY-compiler PRIVATE ${PROJECT_SOURCE_DIR}/backend)
target_include_directories(SYSY-compiler PRIVATE ${PROJECT_SOURCE_DIR}/ir)
# target_include_directories(SYSY-compiler PRIVATE ${PROJECT_SOURCE_DIR}/Target)

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-variable")
include(CPack)
